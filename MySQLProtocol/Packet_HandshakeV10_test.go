package MySQLProtocol

import "testing"
import "github.com/stretchr/testify/assert"

func Test_Packet_HandshakeV10(t *testing.T) {
	var values = []struct {
		packet  Proto
		context Context
	}{
		{packet: Proto{data: []byte{
			0x36, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x2e, 0x35,
			0x2e, 0x32, 0x2d, 0x6d, 0x32, 0x00, 0x0b, 0x00,
			0x00, 0x00, 0x64, 0x76, 0x48, 0x40, 0x49, 0x2d,
			0x43, 0x4a, 0x00, 0xff, 0xf7, 0x08, 0x02, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x34, 0x64,
			0x7c, 0x63, 0x5a, 0x77, 0x6b, 0x34, 0x5e, 0x5d,
			0x3a, 0x00,
		}},
			context: Context{}},
		{packet: Proto{data: []byte{
			0x50, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x2e, 0x36,
			0x2e, 0x34, 0x2d, 0x6d, 0x37, 0x2d, 0x6c, 0x6f,
			0x67, 0x00, 0x56, 0x0a, 0x00, 0x00, 0x52, 0x42,
			0x33, 0x76, 0x7a, 0x26, 0x47, 0x72, 0x00, 0xff,
			0xff, 0x08, 0x02, 0x00, 0x0f, 0xc0, 0x15, 0x00,
			0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
			0x00, 0x2b, 0x79, 0x44, 0x26, 0x2f, 0x5a, 0x5a,
			0x33, 0x30, 0x35, 0x5a, 0x47, 0x00, 0x6d, 0x79,
			0x73, 0x71, 0x6c, 0x5f, 0x6e, 0x61, 0x74, 0x69,
			0x76, 0x65, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77,
			0x6f, 0x72, 0x64, 0x00,
		}},
			context: Context{}},
	}
	var pkt Packet_HandshakeV10

	for _, value := range values {
		pkt = Packet_HandshakeV10{}
		pkt.FromPacket(value.context, value.packet)
		assert.Equal(t, pkt.ToPacket(value.context), value.packet.data, "")
	}
}

func Benchmark_Packet_HandshakeV10_FromPacket(b *testing.B) {
	context := Context{capability: CLIENT_PROTOCOL_41}
	var pkt Packet_HandshakeV10
	var packet = Proto{data: []byte{
		0x36, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x2e, 0x35,
		0x2e, 0x32, 0x2d, 0x6d, 0x32, 0x00, 0x0b, 0x00,
		0x00, 0x00, 0x64, 0x76, 0x48, 0x40, 0x49, 0x2d,
		0x43, 0x4a, 0x00, 0xff, 0xf7, 0x08, 0x02, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x34, 0x64,
		0x7c, 0x63, 0x5a, 0x77, 0x6b, 0x34, 0x5e, 0x5d,
		0x3a, 0x00,
	}}
	for i := 0; i < b.N; i++ {
		pkt = Packet_HandshakeV10{}
		packet.offset = 0
		pkt.FromPacket(context, packet)
	}
}

func Benchmark_Packet_HandshakeV10_GetPacketSize(b *testing.B) {
	context := Context{capability: CLIENT_PROTOCOL_41}
	pkt := Packet_HandshakeV10{}
	var packet = Proto{data: []byte{
		0x36, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x2e, 0x35,
		0x2e, 0x32, 0x2d, 0x6d, 0x32, 0x00, 0x0b, 0x00,
		0x00, 0x00, 0x64, 0x76, 0x48, 0x40, 0x49, 0x2d,
		0x43, 0x4a, 0x00, 0xff, 0xf7, 0x08, 0x02, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x34, 0x64,
		0x7c, 0x63, 0x5a, 0x77, 0x6b, 0x34, 0x5e, 0x5d,
		0x3a, 0x00,
	}}
	pkt.FromPacket(context, packet)
	for i := 0; i < b.N; i++ {
		pkt.GetPacketSize(context)
	}
}

func Benchmark_Packet_HandshakeV10_ToPacket(b *testing.B) {
	context := Context{capability: CLIENT_PROTOCOL_41}
	pkt := Packet_HandshakeV10{}
	var packet = Proto{data: []byte{
		0x36, 0x00, 0x00, 0x00, 0x0a, 0x35, 0x2e, 0x35,
		0x2e, 0x32, 0x2d, 0x6d, 0x32, 0x00, 0x0b, 0x00,
		0x00, 0x00, 0x64, 0x76, 0x48, 0x40, 0x49, 0x2d,
		0x43, 0x4a, 0x00, 0xff, 0xf7, 0x08, 0x02, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
		0x00, 0x00, 0x00, 0x00, 0x00, 0x2a, 0x34, 0x64,
		0x7c, 0x63, 0x5a, 0x77, 0x6b, 0x34, 0x5e, 0x5d,
		0x3a, 0x00,
	}}
	pkt.FromPacket(context, packet)
	for i := 0; i < b.N; i++ {
		pkt.ToPacket(context)
	}
}
